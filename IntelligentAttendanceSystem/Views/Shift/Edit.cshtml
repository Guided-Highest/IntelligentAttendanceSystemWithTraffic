@model ShiftViewModel
@{
    ViewData["Title"] = "Edit Shift";
}

<div class="row justify-content-center">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Edit Shift</h3>
                <div class="card-tools">
                    <a asp-action="Index" class="btn btn-sm btn-secondary">Back to List</a>
                </div>
            </div>
            <div class="card-body">
                <form asp-action="Edit" method="post" id="shiftForm">
                    @Html.AntiForgeryToken()
                    <input type="hidden" asp-for="ShiftId" />

                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label asp-for="ShiftName" class="control-label"></label>
                                <input asp-for="ShiftName" class="form-control" />
                                <span asp-validation-for="ShiftName" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label asp-for="ShiftCode" class="control-label"></label>
                                <input asp-for="ShiftCode" class="form-control" />
                                <span asp-validation-for="ShiftCode" class="text-danger"></span>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-4">
                            <div class="form-group">
                                <label asp-for="StartTime" class="control-label"></label>
                                <input asp-for="StartTime" type="time" class="form-control" />
                                <span asp-validation-for="StartTime" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label asp-for="RelaxTimeMinutes" class="control-label">Relax Time (Minutes)</label>
                                <input asp-for="RelaxTimeMinutes" type="number" min="0" max="240" class="form-control" />
                                <small class="form-text text-muted">Grace period for late check-in (0-240 minutes)</small>
                                <span asp-validation-for="RelaxTimeMinutes" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label asp-for="OffTime" class="control-label"></label>
                                <input asp-for="OffTime" type="time" class="form-control" />
                                <span asp-validation-for="OffTime" class="text-danger"></span>
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <label asp-for="Description" class="control-label"></label>
                        <textarea asp-for="Description" class="form-control" rows="3"></textarea>
                        <span asp-validation-for="Description" class="text-danger"></span>
                    </div>

                    <div class="form-group form-check">
                        <input asp-for="IsActive" class="form-check-input" />
                        <label asp-for="IsActive" class="form-check-label">Active Shift</label>
                    </div>

                    <!-- Shift Preview -->
                    <div class="card bg-light mt-3">
                        <div class="card-header">
                            <h5 class="card-title mb-0">Shift Preview</h5>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <strong>Shift Details:</strong>
                                    <div id="previewShiftName">@Model.ShiftName</div>
                                    <div id="previewShiftCode">@Model.ShiftCode</div>
                                </div>
                                <div class="col-md-6">
                                    <strong>Timings:</strong>
                                    <div id="previewTimings">@Model.StartTime.ToString(@"hh\:mm") - @Model.OffTime.ToString(@"hh\:mm")</div>
                                    <div id="previewTotalHours">Total: @Model.TotalHours.ToString(@"hh\:mm")</div>
                                    <div id="previewLateThreshold">Late after: @Model.LateThreshold.ToString(@"hh\:mm")</div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="form-group mt-4">
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save"></i> Update Shift
                        </button>
                        <a asp-action="Index" class="btn btn-secondary">Cancel</a>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        $(document).ready(function() {
            // Convert TimeSpan to time input format
            function timespanToTimeString(timeSpan) {
                return Math.floor(timeSpan.hours).toString().padStart(2, '0') + ':' +
                       Math.floor(timeSpan.minutes).toString().padStart(2, '0');
            }

            // Set initial values from model
            $('#StartTime').val(timespanToTimeString({
                hours: @Model.StartTime.Hours,
                minutes: @Model.StartTime.Minutes
            }));

            $('#OffTime').val(timespanToTimeString({
                hours: @Model.OffTime.Hours,
                minutes: @Model.OffTime.Minutes
            }));

            // Update preview when values change
            $('input, textarea').on('input change', updatePreview);

            function updatePreview() {
                const shiftName = $('#ShiftName').val() || 'Not set';
                const shiftCode = $('#ShiftCode').val() || 'Not set';
                $('#previewShiftName').text(`Name: ${shiftName}`);
                $('#previewShiftCode').text(`Code: ${shiftCode}`);

                const startTime = $('#StartTime').val();
                const offTime = $('#OffTime').val();
                const relaxMinutes = parseInt($('#RelaxTimeMinutes').val()) || 15;

                if (startTime && offTime) {
                    const start = new Date(`2000-01-01T${startTime}`);
                    const off = new Date(`2000-01-01T${offTime}`);
                    const relaxMs = relaxMinutes * 60 * 1000;
                    const lateThreshold = new Date(start.getTime() + relaxMs);

                    let totalMs = off - start;
                    if (totalMs < 0) totalMs += 24 * 60 * 60 * 1000;

                    const totalHours = Math.floor(totalMs / (60 * 60 * 1000));
                    const totalMinutes = Math.floor((totalMs % (60 * 60 * 1000)) / (60 * 1000));

                    $('#previewTimings').text(`Time: ${startTime} - ${offTime}`);
                    $('#previewTotalHours').text(`Total: ${totalHours}h ${totalMinutes}m`);
                    $('#previewLateThreshold').text(`Late after: ${formatTime(lateThreshold)} (${relaxMinutes} min grace)`);
                }
            }

            function formatTime(date) {
                return date.toTimeString().substring(0, 5);
            }

            $('#shiftForm').on('submit', function(e) {
                const startTime = $('#StartTime').val();
                const offTime = $('#OffTime').val();

                if (startTime && offTime) {
                    const start = new Date(`2000-01-01T${startTime}`);
                    const off = new Date(`2000-01-01T${offTime}`);

                    if (off <= start && offTime !== '00:00') {
                        e.preventDefault();
                        alert('Off Time must be after Start Time. For overnight shifts, use times like 22:00 to 06:00.');
                        return false;
                    }
                }
            });

            updatePreview();
        });
    </script>
}