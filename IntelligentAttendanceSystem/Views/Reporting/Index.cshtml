@{
    ViewData["Title"] = "Face Recognition Reports";
    Layout = "_Layout";
}
<style type="text/css">
    .chart-container {
        position: relative;
        height: 300px;
        width: 100%;
    }

    .card {
        box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15);
        border: 1px solid #e3e6f0;
    }

    .card-header {
        background-color: #f8f9fc;
        border-bottom: 1px solid #e3e6f0;
    }
</style>
<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0"><i class="fas fa-chart-bar"></i> Face Recognition Reports & Analytics</h4>
                </div>
                <div class="card-body">
                    <!-- Dashboard Stats -->
                    <div class="row mb-4" id="dashboardStats">
                        <div class="col-md-3">
                            <div class="card bg-success text-white">
                                <div class="card-body text-center">
                                    <h3 id="todayRecognitions">0</h3>
                                    <p class="mb-0">Today's Recognitions</p>
                                    <small><i class="fas fa-users"></i> Face matches today</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card bg-info text-white">
                                <div class="card-body text-center">
                                    <h3 id="weekRecognitions">0</h3>
                                    <p class="mb-0">This Week</p>
                                    <small><i class="fas fa-calendar-week"></i> Last 7 days</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card bg-warning text-white">
                                <div class="card-body text-center">
                                    <h3 id="totalUsers">0</h3>
                                    <p class="mb-0">Total Users</p>
                                    <small><i class="fas fa-user-friends"></i> Registered faces</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card bg-danger text-white">
                                <div class="card-body text-center">
                                    <h3 id="avgSimilarity">0%</h3>
                                    <p class="mb-0">Avg. Similarity</p>
                                    <small><i class="fas fa-percentage"></i> Today's average</small>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Report Generation Form -->
                    <div class="row">
                        <div class="col-md-8">
                            <div class="card">
                                <div class="card-header">
                                    <h5 class="card-title mb-0"><i class="fas fa-cogs"></i> Generate Report</h5>
                                </div>
                                <div class="card-body">
                                    <form id="reportForm" method="post" asp-action="GenerateReport">
                                        @Html.AntiForgeryToken()

                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group mb-3">
                                                    <label for="StartDate" class="form-label">Start Date</label>
                                                    <input type="date" class="form-control" id="StartDate" name="StartDate"
                                                           value="@DateTime.Today.AddDays(-7).ToString("yyyy-MM-dd")" required>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group mb-3">
                                                    <label for="EndDate" class="form-label">End Date</label>
                                                    <input type="date" class="form-control" id="EndDate" name="EndDate"
                                                           value="@DateTime.Today.ToString("yyyy-MM-dd")" required>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group mb-3">
                                                    <label for="ReportType" class="form-label">Report Type</label>
                                                    <select class="form-select" id="ReportType" name="ReportType">
                                                        <option value="daily">Daily Summary</option>
                                                        <option value="weekly">Weekly Summary</option>
                                                        <option value="monthly">Monthly Summary</option>
                                                        <option value="custom" selected>Custom Range</option>
                                                    </select>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group mb-3">
                                                    <label for="GroupBy" class="form-label">Group By</label>
                                                    <select class="form-select" id="GroupBy" name="GroupBy">
                                                        <option value="hour">Hour</option>
                                                        <option value="day" selected>Day</option>
                                                        <option value="user">User</option>
                                                        <option value="department">Department</option>
                                                    </select>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                                            <button type="submit" class="btn btn-primary me-md-2">
                                                <i class="fas fa-chart-line"></i> Generate Report
                                            </button>
                                            <button type="button" id="downloadExcel" class="btn btn-success me-md-2">
                                                <i class="fas fa-file-excel"></i> Export Excel
                                            </button>
                                            <button type="button" id="downloadPdf" class="btn btn-danger">
                                                <i class="fas fa-file-pdf"></i> Export PDF
                                            </button>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>

                        <!-- Quick Actions -->
                        <div class="col-md-4">
                            <div class="card">
                                <div class="card-header">
                                    <h5 class="card-title mb-0"><i class="fas fa-bolt"></i> Quick Reports</h5>
                                </div>
                                <div class="card-body">
                                    <div class="d-grid gap-2">
                                        <button class="btn btn-outline-primary text-start quick-report" data-days="1">
                                            <i class="fas fa-calendar-day"></i> Today's Report
                                        </button>
                                        <button class="btn btn-outline-primary text-start quick-report" data-days="7">
                                            <i class="fas fa-calendar-week"></i> Last 7 Days
                                        </button>
                                        <button class="btn btn-outline-primary text-start quick-report" data-days="30">
                                            <i class="fas fa-calendar-alt"></i> Last 30 Days
                                        </button>
                                        <button class="btn btn-outline-primary text-start quick-report" data-days="90">
                                            <i class="fas fa-chart-bar"></i> Last 3 Months
                                        </button>
                                    </div>
                                </div>
                            </div>

                            <!-- Export Options -->
                            <div class="card mt-3">
                                <div class="card-header">
                                    <h5 class="card-title mb-0"><i class="fas fa-download"></i> Export Options</h5>
                                </div>
                                <div class="card-body">
                                    <div class="list-group">
                                        <a href="#" class="list-group-item list-group-item-action export-option" data-format="excel">
                                            <i class="fas fa-file-excel text-success"></i> Excel Format (.xlsx)
                                            <small class="d-block text-muted">Best for data analysis</small>
                                        </a>
                                        <a href="#" class="list-group-item list-group-item-action export-option" data-format="csv">
                                            <i class="fas fa-file-csv text-info"></i> CSV Format (.csv)
                                            <small class="d-block text-muted">Compatible with all spreadsheet apps</small>
                                        </a>
                                        <a href="#" class="list-group-item list-group-item-action export-option" data-format="pdf">
                                            <i class="fas fa-file-pdf text-danger"></i> PDF Format (.pdf)
                                            <small class="d-block text-muted">Best for printing and sharing</small>
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Real-time Activity Chart -->
                    <div class="row mt-4">
                        <div class="col-12">
                            <div class="card">
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <h5 class="card-title mb-0"><i class="fas fa-chart-line"></i> Real-time Recognition Activity</h5>
                                    <div class="btn-group btn-group-sm">
                                        <button class="btn btn-outline-secondary active" data-period="24h">24H</button>
                                        <button class="btn btn-outline-secondary" data-period="7d">7D</button>
                                        <button class="btn btn-outline-secondary" data-period="30d">30D</button>
                                    </div>
                                </div>
                                <div class="card-body">
                                    <div id="activityChart" style="height: 300px;">
                                        <div class="text-center py-5">
                                            <div class="spinner-border text-primary" role="status">
                                                <span class="visually-hidden">Loading chart...</span>
                                            </div>
                                            <p class="mt-2 text-muted">Loading activity data...</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row mt-4">
                        <!-- Recognitions Chart -->
                        <div class="col-md-8">
                            <div class="card">
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <h5 class="card-title mb-0">Recognition Activity</h5>
                                    <div class="btn-group btn-group-sm">
                                        <button type="button" class="btn btn-outline-primary active" data-period="week">Week</button>
                                        <button type="button" class="btn btn-outline-primary" data-period="month">Month</button>
                                        <button type="button" class="btn btn-outline-primary" data-period="day">Today</button>
                                    </div>
                                </div>
                                <div class="card-body">
                                    <canvas id="recognitionChart" height="250"></canvas>
                                </div>
                            </div>
                        </div>

                        <!-- Top Users Chart -->
                        <div class="col-md-4">
                            <div class="card">
                                <div class="card-header">
                                    <h5 class="card-title mb-0">Top Users This Week</h5>
                                </div>
                                <div class="card-body">
                                    <canvas id="userRecognitionChart" height="250"></canvas>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Similarity Distribution Chart -->
                    <div class="row mt-4">
                        <div class="col-12">
                            <div class="card">
                                <div class="card-header">
                                    <h5 class="card-title mb-0">Similarity Distribution Today</h5>
                                </div>
                                <div class="card-body">
                                    <canvas id="similarityChart" height="150"></canvas>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Loading Modal -->
<div class="modal fade" id="loadingModal" tabindex="-1">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-body text-center py-4">
                <div class="spinner-border text-primary mb-3" role="status">
                    <span class="visually-hidden">Generating report...</span>
                </div>
                <h5>Generating Report</h5>
                <p class="text-muted mb-0">Please wait...</p>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
              // Chart instances
        let recognitionChart = null;
        let userRecognitionChart = null;
        let similarityChart = null;

        // Initialize everything when page loads
        document.addEventListener('DOMContentLoaded', function() {
            loadDashboardStats();
            loadCharts();
            setupChartControls();

            // Refresh every 2 minutes
            setInterval(() => {
                loadDashboardStats();
                loadCharts();
            }, 120000);
        });

        async function loadCharts() {
            await loadRecognitionChart('week');
            await loadUserRecognitionChart();
            await loadSimilarityChart();
        }

        function setupChartControls() {
            document.querySelectorAll('[data-period]').forEach(button => {
                button.addEventListener('click', function() {
                    const period = this.getAttribute('data-period');

                    // Update active button
                    document.querySelectorAll('[data-period]').forEach(btn => {
                        btn.classList.remove('active');
                    });
                    this.classList.add('active');

                    // Reload chart with new period
                    loadRecognitionChart(period);
                });
            });
        }

        async function loadRecognitionChart(period = 'week') {
            try {
                showChartLoading('recognitionChart', 'Loading chart data...');

                const controller = new AbortController();
                const timeoutId = setTimeout(() => controller.abort(), 15000);

                const response = await fetch(`/Reporting/GetRecognitionChartData?period=${period}`, {
                    signal: controller.signal
                });

                clearTimeout(timeoutId);

                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`Server error: ${response.status} - ${errorText}`);
                }

                const chartData = await response.json();
                renderRecognitionChart(chartData, period);

            } catch (error) {
                console.error('Error loading recognition chart:', error);
                showChartError('recognitionChart', 'Failed to load chart data');
                showToast('Error loading recognition chart data', 'error');
            }
        }

        function renderRecognitionChart(chartData, period) {
            const ctx = document.getElementById('recognitionChart').getContext('2d');

            if (recognitionChart) {
                recognitionChart.destroy();
            }

            const labels = chartData.dataPoints.map(dp => dp.label);
            const recognitionData = chartData.dataPoints.map(dp => dp.value);
            const similarityData = chartData.dataPoints.map(dp => dp.averageSimilarity);

            recognitionChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: 'Recognitions',
                            data: recognitionData,
                            borderColor: 'rgb(54, 162, 235)',
                            backgroundColor: 'rgba(54, 162, 235, 0.1)',
                            borderWidth: 2,
                            fill: true,
                            tension: 0.4,
                            yAxisID: 'y'
                        },
                        {
                            label: 'Avg Similarity %',
                            data: similarityData,
                            borderColor: 'rgb(255, 99, 132)',
                            backgroundColor: 'rgba(255, 99, 132, 0.1)',
                            borderWidth: 2,
                            borderDash: [5, 5],
                            fill: false,
                            tension: 0.4,
                            yAxisID: 'y1'
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    interaction: {
                        mode: 'index',
                        intersect: false
                    },
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: getXAxisLabel(period)
                            },
                            grid: {
                                display: false
                            }
                        },
                        y: {
                            type: 'linear',
                            display: true,
                            position: 'left',
                            title: {
                                display: true,
                                text: 'Recognitions'
                            },
                            beginAtZero: true
                        },
                        y1: {
                            type: 'linear',
                            display: true,
                            position: 'right',
                            title: {
                                display: true,
                                text: 'Similarity %'
                            },
                            beginAtZero: true,
                            min: 0,
                            max: 100,
                            grid: {
                                drawOnChartArea: false
                            }
                        }
                    },
                    plugins: {
                        title: {
                            display: true,
                            text: `Total Recognitions: ${chartData.totalRecognitions.toLocaleString()} | Avg Similarity: ${chartData.averageSimilarity.toFixed(1)}%`
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    let label = context.dataset.label || '';
                                    if (label) {
                                        label += ': ';
                                    }
                                    if (context.dataset.label.includes('Similarity')) {
                                        label += context.parsed.y.toFixed(1) + '%';
                                    } else {
                                        label += context.parsed.y;
                                    }
                                    return label;
                                }
                            }
                        }
                    }
                }
            });
        }

        function getXAxisLabel(period) {
            switch(period) {
                case 'day': return 'Hour of Day';
                case 'month': return 'Date';
                case 'week':
                default: return 'Date';
            }
        }

        async function loadUserRecognitionChart() {
            try {
                showChartLoading('userRecognitionChart', 'Loading user stats...');

                const response = await fetch('/Reporting/GetUserRecognitionStats?topUsers=8');

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const userData = await response.json();
                renderUserRecognitionChart(userData);

            } catch (error) {
                console.error('Error loading user recognition chart:', error);
                showChartError('userRecognitionChart', 'Failed to load user stats');
            }
        }

        function renderUserRecognitionChart(userData) {
            const ctx = document.getElementById('userRecognitionChart').getContext('2d');

            if (userRecognitionChart) {
                userRecognitionChart.destroy();
            }

            const labels = userData.userStats.map(us => us.userName);
            const data = userData.userStats.map(us => us.recognitionCount);

            userRecognitionChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Recognitions',
                        data: data,
                        backgroundColor: [
                            'rgba(255, 99, 132, 0.8)',
                            'rgba(54, 162, 235, 0.8)',
                            'rgba(255, 206, 86, 0.8)',
                            'rgba(75, 192, 192, 0.8)',
                            'rgba(153, 102, 255, 0.8)',
                            'rgba(255, 159, 64, 0.8)',
                            'rgba(199, 199, 199, 0.8)',
                            'rgba(83, 102, 255, 0.8)'
                        ],
                        borderColor: [
                            'rgb(255, 99, 132)',
                            'rgb(54, 162, 235)',
                            'rgb(255, 206, 86)',
                            'rgb(75, 192, 192)',
                            'rgb(153, 102, 255)',
                            'rgb(255, 159, 64)',
                            'rgb(199, 199, 199)',
                            'rgb(83, 102, 255)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    indexAxis: 'y',
                    scales: {
                        x: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Number of Recognitions'
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            callbacks: {
                                afterLabel: function(context) {
                                    const user = userData.userStats[context.dataIndex];
                                    return `Avg Similarity: ${user.averageSimilarity.toFixed(1)}%`;
                                }
                            }
                        }
                    }
                }
            });
        }

        async function loadSimilarityChart() {
            try {
                // Use today's average similarity from dashboard stats
                const response = await fetch('/Reporting/GetDashboardStats');

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const stats = await response.json();
                renderSimilarityChart(stats.averageSimilarityToday);

            } catch (error) {
                console.error('Error loading similarity chart:', error);
            }
        }

        function renderSimilarityChart(avgSimilarity) {
            const ctx = document.getElementById('similarityChart').getContext('2d');

            if (similarityChart) {
                similarityChart.destroy();
            }

            similarityChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: ['Similarity Score', 'Remaining'],
                    datasets: [{
                        data: [avgSimilarity, 100 - avgSimilarity],
                        backgroundColor: [
                            getSimilarityColor(avgSimilarity),
                            'rgba(200, 200, 200, 0.3)'
                        ],
                        borderWidth: 0,
                        circumference: 180,
                        rotation: 270
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    cutout: '70%',
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return `${context.label}: ${context.parsed}%`;
                                }
                            }
                        }
                    }
                }
            });

            // Add center text
            const centerTextPlugin = {
                id: 'centerText',
                afterDraw: (chart) => {
                    const { ctx, chartArea } = chart;
                    const centerX = (chartArea.left + chartArea.right) / 2;
                    const centerY = (chartArea.top + chartArea.bottom) / 2;

                    ctx.save();
                    ctx.font = 'bold 24px Arial';
                    ctx.fillStyle = getSimilarityColor(avgSimilarity);
                    ctx.textAlign = 'center';
                    ctx.textBaseline = 'middle';
                    ctx.fillText(avgSimilarity.toFixed(1) + '%', centerX, centerY);

                    ctx.font = '14px Arial';
                    ctx.fillStyle = '#666';
                    ctx.fillText('Avg Similarity', centerX, centerY + 30);
                    ctx.restore();
                }
            };

            // Register plugin if not already registered
            if (!Chart.registry.getPlugin('centerText')) {
                Chart.register(centerTextPlugin);
            }
        }

        // Helper functions
        function getSimilarityColor(similarity) {
            if (similarity >= 90) return 'rgb(75, 192, 192)'; // Green
            if (similarity >= 80) return 'rgb(255, 206, 86)'; // Yellow
            if (similarity >= 70) return 'rgb(255, 159, 64)'; // Orange
            return 'rgb(255, 99, 132)'; // Red
        }

        function showChartLoading(canvasId, message) {
            const canvas = document.getElementById(canvasId);
            const ctx = canvas.getContext('2d');

            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.font = '16px Arial';
            ctx.fillStyle = '#666';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            ctx.fillText(message, canvas.width / 2, canvas.height / 2);
        }

        function showChartError(canvasId, message) {
            const canvas = document.getElementById(canvasId);
            const ctx = canvas.getContext('2d');

            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.font = '16px Arial';
            ctx.fillStyle = '#dc3545';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            ctx.fillText(message, canvas.width / 2, canvas.height / 2);
        }

        // Your existing dashboard stats function
        async function loadDashboardStats() {
            try {
                const controller = new AbortController();
                const timeoutId = setTimeout(() => controller.abort(), 15000);

                const response = await fetch('/Reporting/GetDashboardStats', {
                    signal: controller.signal
                });

                clearTimeout(timeoutId);

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const stats = await response.json();

                document.getElementById('todayRecognitions').textContent = stats.todayRecognitions.toLocaleString();
                document.getElementById('weekRecognitions').textContent = stats.weekRecognitions.toLocaleString();
                document.getElementById('totalUsers').textContent = stats.totalUsers.toLocaleString();
                document.getElementById('avgSimilarity').textContent = stats.averageSimilarityToday.toFixed(1) + '%';

            } catch (error) {
                console.error('Error loading dashboard stats:', error);
                showToast('Error loading dashboard statistics', 'error');
                setDefaultStats();
            }
        }

        function setDefaultStats() {
            document.getElementById('todayRecognitions').textContent = '0';
            document.getElementById('weekRecognitions').textContent = '0';
            document.getElementById('totalUsers').textContent = '0';
            document.getElementById('avgSimilarity').textContent = '0%';
        }
        // Add retry functionality
        let retryCount = 0;
        const maxRetries = 2;

        async function loadDashboardStatsWithRetry() {
            try {
                await loadDashboardStats();
                retryCount = 0; // Reset on success
            } catch (error) {
                if (retryCount < maxRetries) {
                    retryCount++;
                    console.log(`Retrying dashboard load... Attempt ${retryCount}`);
                    setTimeout(loadDashboardStatsWithRetry, 2000 * retryCount); // Exponential backoff
                }
            }
        }
        loadDashboardStatsWithRetry();

        // Setup event listeners
        function setupEventListeners() {
            // Quick report buttons
            document.querySelectorAll('.quick-report').forEach(btn => {
                btn.addEventListener('click', function() {
                    const days = parseInt(this.getAttribute('data-days'));
                    setDateRange(days);
                    generateQuickReport(days);
                });
            });

            // Export buttons
            document.getElementById('downloadExcel').addEventListener('click', downloadExcel);
            document.getElementById('downloadPdf').addEventListener('click', downloadPdf);

            // Export options
            document.querySelectorAll('.export-option').forEach(option => {
                option.addEventListener('click', function(e) {
                    e.preventDefault();
                    const format = this.getAttribute('data-format');
                    exportReport(format);
                });
            });

            // Chart period buttons
            document.querySelectorAll('[data-period]').forEach(btn => {
                btn.addEventListener('click', function() {
                    const period = this.getAttribute('data-period');
                    // Update active state
                    document.querySelectorAll('[data-period]').forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    loadActivityChart(period);
                });
            });

            // Report type change
            document.getElementById('ReportType').addEventListener('change', function() {
                handleReportTypeChange(this.value);
            });
        }

        // Set date range for quick reports
        function setDateRange(days) {
            const endDate = new Date();
            const startDate = new Date();
            startDate.setDate(startDate.getDate() - days);

            document.getElementById('StartDate').value = startDate.toISOString().split('T')[0];
            document.getElementById('EndDate').value = endDate.toISOString().split('T')[0];
        }

        // Generate quick report
        function generateQuickReport(days) {
            showLoadingModal();

            // Simulate report generation
            setTimeout(() => {
                hideLoadingModal();
                showToast(`Quick report for last ${days} days generated`, 'success');
                // In a real app, you would update the report view here
            }, 1500);
        }

        // Download Excel
        async function downloadExcel() {
            await exportReport('excel');
        }

        // Download PDF
        async function downloadPdf() {
            await exportReport('pdf');
        }

        // Export report in specified format
        async function exportReport(format) {
            const formData = new FormData(document.getElementById('reportForm'));

            try {
                showLoadingModal();

                let url, method;
                if (format === 'excel') {
                    url = '@Url.Action("DownloadExcel", "Reporting")';
                    method = 'POST';
                } else if (format === 'pdf') {
                    url = '@Url.Action("DownloadPdf", "Reporting")';
                    method = 'POST';
                } else {
                    url = '@Url.Action("DownloadExcel", "Reporting")'; // Default to Excel
                    method = 'POST';
                }

                const response = await fetch(url, {
                    method: method,
                    body: formData
                });

                if (response.ok) {
                    const blob = await response.blob();
                    const downloadUrl = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = downloadUrl;

                    const filename = response.headers.get('Content-Disposition')
                        ?.split('filename=')[1]
                        ?.replace(/"/g, '')
                        || `face_recognition_report.${format}`;

                    a.download = filename;
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    window.URL.revokeObjectURL(downloadUrl);

                    showToast(`Report exported successfully as ${format.toUpperCase()}`, 'success');
                } else {
                    throw new Error('Export failed');
                }
            } catch (error) {
                console.error('Export error:', error);
                showToast('Error exporting report', 'error');
            } finally {
                hideLoadingModal();
            }
        }

        // Handle report type change
        function handleReportTypeChange(type) {
            const startDate = document.getElementById('StartDate');
            const endDate = document.getElementById('EndDate');
            const now = new Date();

            switch (type) {
                case 'daily':
                    startDate.value = now.toISOString().split('T')[0];
                    endDate.value = now.toISOString().split('T')[0];
                    break;
                case 'weekly':
                    const weekAgo = new Date(now);
                    weekAgo.setDate(now.getDate() - 7);
                    startDate.value = weekAgo.toISOString().split('T')[0];
                    endDate.value = now.toISOString().split('T')[0];
                    break;
                case 'monthly':
                    const monthAgo = new Date(now);
                    monthAgo.setMonth(now.getMonth() - 1);
                    startDate.value = monthAgo.toISOString().split('T')[0];
                    endDate.value = now.toISOString().split('T')[0];
                    break;
                case 'custom':
                    // Keep current dates
                    break;
            }
        }

        // Load activity chart (simplified version)
        function loadActivityChart(period) {
            const chartContainer = document.getElementById('activityChart');

            // Simulate chart loading
            chartContainer.innerHTML = `
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading chart...</span>
                    </div>
                    <p class="mt-2 text-muted">Loading ${period} activity data...</p>
                </div>
            `;

            // Simulate API call
            setTimeout(() => {
                // In a real app, you would use Chart.js or similar here
                chartContainer.innerHTML = `
                    <div class="text-center py-4">
                        <i class="fas fa-chart-bar fa-3x text-muted mb-3"></i>
                        <h5>Activity Chart</h5>
                        <p class="text-muted">Showing data for ${period}</p>
                        <small class="text-muted">Chart implementation would go here</small>
                    </div>
                `;
            }, 1000);
        }

        // Loading modal functions
        function showLoadingModal() {
            const modal = new bootstrap.Modal(document.getElementById('loadingModal'));
            modal.show();
        }

        function hideLoadingModal() {
            const modal = bootstrap.Modal.getInstance(document.getElementById('loadingModal'));
            if (modal) {
                modal.hide();
            }
        }

        // Toast notification function
        function showToast(message, type = 'info') {
            // Create toast container if it doesn't exist
            let container = document.getElementById('toastContainer');
            if (!container) {
                container = document.createElement('div');
                container.id = 'toastContainer';
                container.className = 'toast-container position-fixed top-0 end-0 p-3';
                container.style.zIndex = '9999';
                document.body.appendChild(container);
            }

            const toast = document.createElement('div');
            toast.className = `toast align-items-center text-white bg-${type === 'error' ? 'danger' : type} border-0`;
            toast.setAttribute('role', 'alert');
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">
                        <i class="fas fa-${getToastIcon(type)} me-2"></i>
                        ${message}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                </div>
            `;

            container.appendChild(toast);
            const bsToast = new bootstrap.Toast(toast);
            bsToast.show();

            toast.addEventListener('hidden.bs.toast', () => {
                toast.remove();
            });
        }

        function getToastIcon(type) {
            switch (type) {
                case 'success': return 'check-circle';
                case 'error': return 'exclamation-triangle';
                case 'warning': return 'exclamation-circle';
                default: return 'info-circle';
            }
        }
    </script>

    <style>
        .card {
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
            border: 1px solid rgba(0, 0, 0, 0.125);
        }

            .card.bg-success, .card.bg-info, .card.bg-warning, .card.bg-danger {
                border: none;
            }

        .list-group-item {
            border: 1px solid rgba(0, 0, 0, 0.125);
            margin-bottom: -1px;
        }

            .list-group-item:first-child {
                border-top-left-radius: 0.375rem;
                border-top-right-radius: 0.375rem;
            }

            .list-group-item:last-child {
                border-bottom-left-radius: 0.375rem;
                border-bottom-right-radius: 0.375rem;
            }

        .btn-outline-primary {
            border: 1px solid #0d6efd;
        }

        #activityChart {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border-radius: 0.375rem;
        }
    </style>
}