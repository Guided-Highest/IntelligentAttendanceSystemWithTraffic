@model List<FaceUser>

@{
    ViewData["Title"] = "Face User Management";
    Layout = "_Layout";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h4 class="mb-0"><i class="fas fa-users"></i> Face User Management</h4>
                    <div>
                        <button id="syncBtn" class="btn btn-warning btn-sm me-2">
                            <i class="fas fa-sync-alt"></i> Sync with Device
                        </button>
                        <a href="@Url.Action("Create")" class="btn btn-success btn-sm">
                            <i class="fas fa-user-plus"></i> Add New User
                        </a>
                    </div>
                </div>
                <div class="card-body">
                    <!-- Search and Filter Section -->
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <div class="input-group">
                                <input type="text" id="searchInput" class="form-control" placeholder="Search users...">
                                <button id="searchBtn" class="btn btn-outline-primary">
                                    <i class="fas fa-search"></i> Search
                                </button>
                            </div>
                        </div>
                        <div class="col-md-6 text-end">
                            <div class="btn-group">
                                <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                    <i class="fas fa-filter"></i> Filter
                                </button>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item" href="#" data-filter="all">All Users</a></li>
                                    <li><a class="dropdown-item" href="#" data-filter="active">Active Only</a></li>
                                    <li><a class="dropdown-item" href="#" data-filter="inactive">Inactive</a></li>
                                </ul>
                            </div>
                        </div>
                    </div>

                    <!-- Users Table -->
                    <div class="table-responsive">
                        <table class="table table-striped table-hover" id="usersTable">
                            <thead class="table-dark">
                                <tr>
                                    <th>User ID</th>
                                    <th>Name</th>
                                    <th>Department</th>
                                    <th>Position</th>
                                    <th>Card Number</th>
                                    <th>Region</th>
                                    <th>Created Date</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var user in Model)
                                {
                                    <tr data-user-id="@user.Id">
                                        <td>
                                            <code>@user.UserId</code>
                                        </td>
                                        <td>
                                            <div class="d-flex align-items-center">
                                                @if (!string.IsNullOrEmpty(user.FaceImageBase64))
                                                {
                                                    <img src="data:image/jpeg;base64,@user.FaceImageBase64"
                                                         class="rounded-circle me-2"
                                                         style="width: 40px; height: 40px; object-fit: cover;"
                                                         alt="@user.Name">
                                                }
                                                else
                                                {
                                                    <div class="rounded-circle bg-secondary me-2 d-flex align-items-center justify-content-center"
                                                         style="width: 40px; height: 40px;">
                                                        <i class="fas fa-user text-white"></i>
                                                    </div>
                                                }
                                                <div>
                                                    <strong>@user.Name</strong>
                                                    <div class="text-muted small">@user.Gender</div>
                                                </div>
                                            </div>
                                        </td>
                                        <td>@user.Department</td>
                                        <td>@user.Position</td>
                                        <td>
                                            @if (!string.IsNullOrEmpty(user.CredentialNumber))
                                            {
                                                <span class="badge bg-info">@user.CredentialNumber</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">No card</span>
                                            }
                                        </td>
                                        <td>@user.CreatedDate.ToString("yyyy-MM-dd")</td>
                                        <td>@user.Region</td>
                                        <td>
                                            <span class="badge bg-@(user.IsActive ? "success" : "secondary")">
                                                @(user.IsActive ? "Active" : "Inactive")
                                            </span>
                                        </td>
                                        <td>
                                            <div class="btn-group btn-group-sm">
                                                <a href="@Url.Action("Details", new { id = user.Id })"
                                                   class="btn btn-outline-info"
                                                   title="View Details">
                                                    <i class="fas fa-eye"></i>
                                                </a>
                                                <a href="@Url.Action("Edit", new { id = user.Id })"
                                                   class="btn btn-outline-primary"
                                                   title="Edit User">
                                                    <i class="fas fa-edit"></i>
                                                </a>
                                                <button class="btn btn-outline-danger delete-btn"
                                                        data-user-id="@user.Id"
                                                        data-user-name="@user.Name"
                                                        title="Delete User">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <!-- Empty State -->
                    @if (!Model.Any())
                    {
                        <div class="text-center py-5">
                            <i class="fas fa-users fa-4x text-muted mb-3"></i>
                            <h4 class="text-muted">No Users Found</h4>
                            <p class="text-muted">Get started by adding your first face recognition user.</p>
                            <a href="@Url.Action("Create")" class="btn btn-primary">
                                <i class="fas fa-user-plus"></i> Add First User
                            </a>
                        </div>
                    }
                </div>
                <div class="card-footer">
                    <div class="row">
                        <div class="col-md-6">
                            <small class="text-muted">
                                Showing <strong>@Model.Count</strong> users
                            </small>
                        </div>
                        <div class="col-md-6 text-end">
                            <small class="text-muted">
                                Last sync: <span id="lastSyncTime">Never</span>
                            </small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">
                    <i class="fas fa-exclamation-triangle"></i> Confirm Delete
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete user <strong id="deleteUserName"></strong>?</p>
                <p class="text-muted small">This action cannot be undone. The user will be removed from the system and device.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete User</button>
            </div>
        </div>
    </div>
</div>

<!-- Sync Progress Modal -->
<div class="modal fade" id="syncModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-warning text-dark">
                <h5 class="modal-title">
                    <i class="fas fa-sync-alt"></i> Syncing with Device
                </h5>
            </div>
            <div class="modal-body">
                <div class="text-center">
                    <div class="spinner-border text-warning mb-3" role="status">
                        <span class="visually-hidden">Syncing...</span>
                    </div>
                    <p>Synchronizing user database with device...</p>
                    <div class="progress">
                        <div class="progress-bar progress-bar-striped progress-bar-animated"
                             role="progressbar" style="width: 100%"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let deleteUserId = null;

        // Delete user functionality
        document.querySelectorAll('.delete-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                deleteUserId = this.getAttribute('data-user-id');
                const userName = this.getAttribute('data-user-name');
                document.getElementById('deleteUserName').textContent = userName;

                const deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
                deleteModal.show();
            });
        });

        // Confirm delete
        document.getElementById('confirmDeleteBtn').addEventListener('click', async function() {
            if (!deleteUserId) return;

            const deleteModal = bootstrap.Modal.getInstance(document.getElementById('deleteModal'));

            try {
                const response = await fetch('@Url.Action("Delete")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(deleteUserId)
                });

                const result = await response.json();

                if (result.success) {
                    // Remove the row from table
                    const row = document.querySelector(`tr[data-user-id="${deleteUserId}"]`);
                    if (row) {
                        row.remove();
                    }

                    // Show success message
                    showToast('User deleted successfully', 'success');
                } else {
                    showToast('Error: ' + result.message, 'error');
                }
            } catch (error) {
                console.error('Error deleting user:', error);
                showToast('Error deleting user', 'error');
            } finally {
                deleteModal.hide();
                deleteUserId = null;
            }
        });

        // Sync with device
        document.getElementById('syncBtn').addEventListener('click', async function() {
            const syncModal = new bootstrap.Modal(document.getElementById('syncModal'));
            syncModal.show();

            try {
                const response = await fetch('@Url.Action("SyncWithDevice")', {
                    method: 'POST'
                });

                const result = await response.json();

                if (result.success) {
                    showToast('Synchronization completed successfully', 'success');
                    // Update last sync time
                    document.getElementById('lastSyncTime').textContent = new Date().toLocaleString();
                    // Reload the page to show updated data
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showToast('Synchronization failed: ' + result.message, 'error');
                }
            } catch (error) {
                console.error('Error syncing with device:', error);
                showToast('Error during synchronization', 'error');
            } finally {
                syncModal.hide();
            }
        });

        // Search functionality
        document.getElementById('searchBtn').addEventListener('click', performSearch);
        document.getElementById('searchInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                performSearch();
            }
        });

        async function performSearch() {
            const searchTerm = document.getElementById('searchInput').value.trim();

            try {
                const response = await fetch(`@Url.Action("Search")?term=${encodeURIComponent(searchTerm)}`);
                const users = await response.json();

                // Update table with search results
                updateTable(users);
            } catch (error) {
                console.error('Error searching users:', error);
                showToast('Error searching users', 'error');
            }
        }

        function updateTable(users) {
            const tbody = document.querySelector('#usersTable tbody');
            tbody.innerHTML = '';

            if (users.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="8" class="text-center text-muted py-4">
                            <i class="fas fa-search fa-2x mb-2"></i>
                            <p>No users found matching your search criteria.</p>
                        </td>
                    </tr>
                `;
                return;
            }

            users.forEach(user => {
                const row = `
                    <tr data-user-id="${user.id}">
                        <td><code>${user.userId}</code></td>
                        <td>
                            <div class="d-flex align-items-center">
                                <div class="rounded-circle bg-secondary me-2 d-flex align-items-center justify-content-center"
                                     style="width: 40px; height: 40px;">
                                    <i class="fas fa-user text-white"></i>
                                </div>
                                <div>
                                    <strong>${user.name}</strong>
                                </div>
                            </div>
                        </td>
                        <td>${user.department || ''}</td>
                        <td>${user.position || ''}</td>
                        <td>
                            ${user.cardNumber ? `<span class="badge bg-info">${user.cardNumber}</span>` : '<span class="text-muted">No card</span>'}
                        </td>
                        <td>${new Date(user.createdDate).toLocaleDateString()}</td>
                        <td>
                            <span class="badge bg-success">Active</span>
                        </td>
                        <td>
                            <div class="btn-group btn-group-sm">
                                <a href="@Url.Action("Details")/${user.id}"
                                   class="btn btn-outline-info"
                                   title="View Details">
                                    <i class="fas fa-eye"></i>
                                </a>
                                <a href="@Url.Action("Edit")/${user.id}"
                                   class="btn btn-outline-primary"
                                   title="Edit User">
                                    <i class="fas fa-edit"></i>
                                </a>
                                <button class="btn btn-outline-danger delete-btn"
                                        data-user-id="${user.id}"
                                        data-user-name="${user.name}"
                                        title="Delete User">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                `;
                tbody.innerHTML += row;
            });

            // Re-attach delete event listeners to new rows
            document.querySelectorAll('.delete-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    deleteUserId = this.getAttribute('data-user-id');
                    const userName = this.getAttribute('data-user-name');
                    document.getElementById('deleteUserName').textContent = userName;

                    const deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
                    deleteModal.show();
                });
            });
        }

        // Filter functionality
        document.querySelectorAll('[data-filter]').forEach(item => {
            item.addEventListener('click', function() {
                const filter = this.getAttribute('data-filter');
                // Implement filter logic here
                showToast(`Filter: ${filter}`, 'info');
            });
        });

        // Toast notification function
        function showToast(message, type = 'info') {
            // Create toast element
            const toast = document.createElement('div');
            toast.className = `toast align-items-center text-white bg-${type === 'error' ? 'danger' : type} border-0`;
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">
                        <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-triangle' : 'info-circle'} me-2"></i>
                        ${message}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                </div>
            `;

            // Add to container
            const container = document.getElementById('toastContainer') || createToastContainer();
            container.appendChild(toast);

            // Show toast
            const bsToast = new bootstrap.Toast(toast);
            bsToast.show();

            // Remove after hide
            toast.addEventListener('hidden.bs.toast', () => {
                toast.remove();
            });
        }

        function createToastContainer() {
            const container = document.createElement('div');
            container.id = 'toastContainer';
            container.className = 'toast-container position-fixed top-0 end-0 p-3';
            container.style.zIndex = '9999';
            document.body.appendChild(container);
            return container;
        }

        // Initialize last sync time
        document.addEventListener('DOMContentLoaded', function() {
            document.getElementById('lastSyncTime').textContent = 'Never';
        });
    </script>
}